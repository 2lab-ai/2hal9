apiVersion: v1
kind: Namespace
metadata:
  name: hal9
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hal9-config
  namespace: hal9
data:
  production.yaml: |
    server_id: "hal9-k8s-cluster"
    neurons:
      - id: "k8s-l4-strategic"
        layer: "L4"
        claude_command: "claude"
        forward_connections: ["k8s-l3-arch", "k8s-l3-design"]
        settings:
          temperature: 0.7
          max_tokens: 4000
      - id: "k8s-l3-arch"
        layer: "L3"
        claude_command: "claude"
        forward_connections: ["k8s-l2-impl-1", "k8s-l2-impl-2"]
        backward_connections: ["k8s-l4-strategic"]
        settings:
          temperature: 0.5
          max_tokens: 3000
      - id: "k8s-l2-impl-1"
        layer: "L2"
        claude_command: "claude"
        backward_connections: ["k8s-l3-arch"]
        settings:
          temperature: 0.3
          max_tokens: 2000
    claude:
      mode: "api"
      model: "claude-3-sonnet-20240229"
      temperature: 0.5
      max_tokens: 4000
      rate_limit: 60
      fallback_to_mock: true
      cost_controls:
        max_cost_per_hour: 10.0
        max_cost_per_day: 100.0
        max_tokens_per_request: 4000
        alert_threshold: 0.8
    monitoring:
      enabled: true
      metrics_interval: 60
      log_level: "info"
---
apiVersion: v1
kind: Secret
metadata:
  name: hal9-secrets
  namespace: hal9
type: Opaque
stringData:
  ANTHROPIC_API_KEY: "your-api-key-here"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hal9-server
  namespace: hal9
  labels:
    app: hal9
    component: server
spec:
  replicas: 5    # Increased to match HPA minReplicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2         # Allow 2 extra pods during updates
      maxUnavailable: 1   # Keep most pods running during updates
  selector:
    matchLabels:
      app: hal9
      component: server
  template:
    metadata:
      labels:
        app: hal9
        component: server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      priorityClassName: hal9-critical   # Use priority class
      terminationGracePeriodSeconds: 60   # Allow graceful shutdown
      containers:
      - name: hal9-server
        image: hal9:latest
        imagePullPolicy: Always
        ports:
        - name: api
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: RUST_BACKTRACE
          value: "1"
        - name: HAL9_MAX_CONNECTIONS
          value: "1000"
        - name: HAL9_CACHE_SIZE
          value: "2000"
        - name: HAL9_CIRCUIT_BREAKER_THRESHOLD
          value: "5"
        - name: HAL9_CIRCUIT_BREAKER_TIMEOUT
          value: "60"
        - name: HAL9_CONFIG_PATH
          value: "/app/config/production.yaml"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: hal9-secrets
              key: ANTHROPIC_API_KEY
        volumeMounts:
        - name: config
          mountPath: /app/config
        - name: logs
          mountPath: /app/logs
        resources:
          requests:
            memory: "2Gi"    # Increased from 1Gi based on production metrics
            cpu: "1"          # Increased from 500m for better performance
          limits:
            memory: "4Gi"    # Increased from 2Gi to prevent OOM
            cpu: "2"          # Increased from 1000m to prevent throttling
        livenessProbe:
          httpGet:
            path: /health
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: api
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: api
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        # Add lifecycle hooks for graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]  # Allow time for load balancer to stop routing
      volumes:
      - name: config
        configMap:
          name: hal9-config
      - name: logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: hal9-service
  namespace: hal9
  labels:
    app: hal9
spec:
  type: ClusterIP
  selector:
    app: hal9
    component: server
  ports:
  - name: api
    port: 8080
    targetPort: api
  - name: metrics
    port: 9090
    targetPort: metrics
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: hal9-hpa
  namespace: hal9
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hal9-server
  minReplicas: 5        # Increased from 3 for better base availability
  maxReplicas: 30       # Increased from 10 to match 1000-user config
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60    # Reduced from 70 for earlier scaling
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70    # Reduced from 80 for earlier scaling
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60    # Scale up quickly
      policies:
      - type: Pods
        value: 5                        # Add up to 5 pods at once
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300   # Scale down slowly
      policies:
      - type: Pods
        value: 2                        # Remove max 2 pods at once
        periodSeconds: 120
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hal9-ingress
  namespace: hal9
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "10"
spec:
  tls:
  - hosts:
    - hal9.example.com
    secretName: hal9-tls
  rules:
  - host: hal9.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: hal9-service
            port:
              name: api
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: hal9-service
            port:
              name: metrics
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: hal9-metrics
  namespace: hal9
  labels:
    app: hal9
spec:
  selector:
    matchLabels:
      app: hal9
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics