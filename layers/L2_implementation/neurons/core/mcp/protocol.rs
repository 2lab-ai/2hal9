//! MCP Protocol definitions for 2HAL9

use serde::{Deserialize, Serialize};
use serde_json::Value;
use uuid::Uuid;

/// MCP Message wrapper
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "jsonrpc")]
pub enum MCPMessage {
    #[serde(rename = "2.0")]
    V2 {
        #[serde(flatten)]
        content: MCPContent,
    },
}

/// MCP Content types
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MCPContent {
    Request(MCPRequest),
    Response(MCPResponse),
    Notification(MCPNotification),
}

/// MCP Request
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MCPRequest {
    pub id: String,
    pub method: String,
    #[serde(default)]
    pub params: Value,
}

/// MCP Response
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MCPResponse {
    pub id: String,
    #[serde(flatten)]
    pub result: ResponseResult,
}

/// Response result types
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResponseResult {
    Success { result: Value },
    Error { error: MCPError },
}

/// MCP Error
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MCPError {
    pub code: i32,
    pub message: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Value>,
}

/// MCP Notification
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MCPNotification {
    pub method: String,
    #[serde(default)]
    pub params: Value,
}

/// Standard MCP methods for neurons
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum NeuronMethod {
    /// Initialize connection
    Initialize,
    /// List available tools
    ListTools,
    /// Call a specific tool
    CallTool,
    /// List available resources
    ListResources,
    /// Read a resource
    ReadResource,
    /// Subscribe to resource changes
    SubscribeResource,
    /// Process a task (main neuron function)
    ProcessTask,
    /// Get neuron capabilities
    GetCapabilities,
    /// Get neuron status
    GetStatus,
}

/// Neuron capability definition
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NeuronCapability {
    pub id: String,
    pub name: String,
    pub version: String,
    pub layer: String,
    pub description: String,
    pub tools: Vec<String>,
    pub resources: Vec<String>,
    pub supports_batch: bool,
    pub max_batch_size: Option<usize>,
}

/// Task processing request
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ProcessTaskRequest {
    pub task_id: Uuid,
    pub parent_task_id: Option<Uuid>,
    pub content: String,
    pub context: TaskContext,
}

/// Task context for processing
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TaskContext {
    pub layer_from: String,
    pub layer_to: String,
    pub batch_id: Uuid,
    pub metadata: std::collections::HashMap<String, String>,
}

/// Task processing response
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ProcessTaskResponse {
    pub task_id: Uuid,
    pub subtasks: Vec<SubTask>,
    pub status: TaskStatus,
    pub processing_time_ms: u64,
}

/// Subtask generated by processing
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SubTask {
    pub id: Uuid,
    pub content: String,
    pub target_neuron: String,
    pub target_layer: String,
}

/// Task processing status
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum TaskStatus {
    Success,
    Partial,
    Failed,
}

/// Resource definition
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Resource {
    pub uri: String,
    pub name: String,
    pub mime_type: String,
    pub description: Option<String>,
}

impl MCPMessage {
    /// Create a new request message
    pub fn request(id: String, method: String, params: Value) -> Self {
        MCPMessage::V2 {
            content: MCPContent::Request(MCPRequest { id, method, params }),
        }
    }

    /// Create a new response message
    pub fn response(id: String, result: Value) -> Self {
        MCPMessage::V2 {
            content: MCPContent::Response(MCPResponse {
                id,
                result: ResponseResult::Success { result },
            }),
        }
    }

    /// Create an error response
    pub fn error(id: String, code: i32, message: String) -> Self {
        MCPMessage::V2 {
            content: MCPContent::Response(MCPResponse {
                id,
                result: ResponseResult::Error {
                    error: MCPError {
                        code,
                        message,
                        data: None,
                    },
                },
            }),
        }
    }

    /// Create a notification message
    pub fn notification(method: String, params: Value) -> Self {
        MCPMessage::V2 {
            content: MCPContent::Notification(MCPNotification { method, params }),
        }
    }
}

/// Standard error codes
pub mod error_codes {
    pub const PARSE_ERROR: i32 = -32700;
    pub const INVALID_REQUEST: i32 = -32600;
    pub const METHOD_NOT_FOUND: i32 = -32601;
    pub const INVALID_PARAMS: i32 = -32602;
    pub const INTERNAL_ERROR: i32 = -32603;
    pub const SERVER_ERROR: i32 = -32000;
}