version: '3.8'

services:
  hal9-server:
    build:
      context: ../../../..
      dockerfile: layers/L3_operational/configuration/docker/Dockerfile.production
    image: 2lab/hal9:latest
    container_name: hal9-server
    restart: unless-stopped
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # WebSocket
      - "9090:9090"  # Prometheus metrics
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://hal9:hal9@postgres:5432/hal9}
      # Claude API
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      CLAUDE_MODE: ${CLAUDE_MODE:-api}
      # Redis
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      # Rate limiting
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-60}
      RATE_LIMIT_WINDOW_SECONDS: ${RATE_LIMIT_WINDOW_SECONDS:-60}
      # JWT
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - hal9-config:/app/config
      - hal9-logs:/app/logs
      - hal9-data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/local/bin/hal9", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - hal9-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  postgres:
    image: postgres:16-alpine
    container_name: hal9-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: hal9
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hal9}
      POSTGRES_DB: hal9
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations/postgres:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hal9"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hal9-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: hal9-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hal9-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  nginx:
    image: nginx:alpine
    container_name: hal9-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/hal9.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      - hal9-server
    networks:
      - hal9-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  prometheus:
    image: prom/prometheus:latest
    container_name: hal9-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - hal9-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: hal9-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - hal9-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  hal9-config:
  hal9-logs:
  hal9-data:
  postgres-data:
  redis-data:
  nginx-cache:
  prometheus-data:
  grafana-data:

networks:
  hal9-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16