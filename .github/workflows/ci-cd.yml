name: HAL9 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  RUST_VERSION: "1.75"
  CARGO_TERM_COLOR: always
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1. 코드 품질 검사
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --workspace --no-deps -- -W clippy::all

  # 2. 테스트 실행
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-suite: [unit, integration, performance]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install
          pip install psutil
      
      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: cargo test --workspace --lib
        
      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: |
          cargo test --workspace --test '*'
          node demo/test-integrated-suite.js
          
      - name: Run performance benchmarks
        if: matrix.test-suite == 'performance'
        run: |
          cargo bench --workspace
          ./demo/verify-performance.sh
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            target/criterion
            logs/

  # 3. 빌드
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Build release
        run: cargo build --workspace --release
        
      - name: Build demos
        run: |
          cd demo/ai-genius-game
          cargo build --release
          cd ../working-demo
          cargo build --release
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hal9-binaries
          path: |
            target/release/hal9-server
            demo/ai-genius-game/target/release/ai-genius-game
            demo/working-demo/target/release/working-demo

  # 4. Docker 이미지 빌드
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Build and push simple Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.simple
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:simple
          platforms: linux/amd64,linux/arm64

  # 5. 보안 검사
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run cargo audit
        run: |
          cargo install cargo-audit
          cargo audit

  # 6. 문서 생성
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
      
      - name: Generate Rust docs
        run: cargo doc --workspace --no-deps
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  # 7. 릴리스 배포
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.event_name == 'release'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying version ${{ github.event.release.tag_name }} to production"
          # kubectl apply -f layers/L3_operational/configuration/kubernetes/
          # kubectl set image deployment/hal9 hal9=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}
      
      - name: Create GitHub release artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/hal9-server
            demo/ai-genius-game/target/release/ai-genius-game
            docker-compose.yml
            docker-compose.simple.yml
            
      - name: Notify deployment
        run: |
          echo "HAL9 ${{ github.event.release.tag_name }} deployed successfully!"
          # Send notification to Slack/Discord/etc

  # 8. 성능 리포트
  performance-report:
    name: Performance Report
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download benchmark results
        uses: actions/download-artifact@v3
        with:
          name: test-results-performance
          
      - name: Generate performance report
        run: |
          echo "# HAL9 Performance Report" > performance-report.md
          echo "Generated: $(date)" >> performance-report.md
          echo "" >> performance-report.md
          # Process benchmark results and add to report
          
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.md