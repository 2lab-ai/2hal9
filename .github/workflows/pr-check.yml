name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Run tests with coverage
      run: cargo tarpaulin --workspace --out Xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./cobertura.xml
        fail_ci_if_error: false

  size-check:
    name: Binary Size Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release binary
      run: cargo build --release --bin hal9-server
    
    - name: Check binary size
      run: |
        SIZE=$(stat -c%s target/release/hal9-server)
        echo "Binary size: $SIZE bytes"
        if [ $SIZE -gt 52428800 ]; then  # 50MB
          echo "::warning::Binary size exceeds 50MB threshold"
        fi
    
    - name: Strip binary and check size
      run: |
        strip target/release/hal9-server
        SIZE=$(stat -c%s target/release/hal9-server)
        echo "Stripped binary size: $SIZE bytes"

  docker-check:
    name: Docker Build Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: hal9-test:pr-${{ github.event.pull_request.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: hal9-test:pr-${{ github.event.pull_request.number }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [lint, security, test-coverage, size-check, docker-check]
    if: always()
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## PR Check Results')
          );
          
          const checkRuns = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
          });
          
          let body = '## PR Check Results\n\n';
          body += '| Check | Status |\n';
          body += '|-------|--------|\n';
          
          const checks = ['Lint and Format', 'Security Audit', 'Test Coverage', 'Binary Size Check', 'Docker Build Check'];
          for (const checkName of checks) {
            const check = checkRuns.data.check_runs.find(run => run.name === checkName);
            const status = check ? 
              (check.conclusion === 'success' ? '✅' : '❌') : 
              '⏳';
            body += `| ${checkName} | ${status} |\n`;
          }
          
          body += '\n';
          body += `Last updated: ${new Date().toISOString()}\n`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }