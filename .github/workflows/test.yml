name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-tarpaulin
      run: |
        if ! command -v cargo-tarpaulin &> /dev/null; then
          cargo install cargo-tarpaulin
        fi
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --workspace --no-deps -- -D warnings
    
    - name: Build
      run: cargo build --workspace --release
    
    - name: Run unit tests
      run: cargo test --workspace --lib -- --nocapture
      env:
        DATABASE_URL: sqlite::memory:
        CLAUDE_MODE: mock
    
    - name: Run integration tests
      run: cargo test --workspace --test '*' -- --nocapture
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost/hal9_test
        REDIS_URL: redis://localhost:6379
        CLAUDE_MODE: mock
    
    - name: Run doc tests
      run: cargo test --workspace --doc
    
    - name: Generate coverage report
      run: |
        cargo tarpaulin --workspace \
          --exclude-files "*/tests/*" \
          --exclude-files "*/examples/*" \
          --exclude-files "*/benches/*" \
          --out Xml \
          --output-dir ./coverage
      env:
        DATABASE_URL: sqlite::memory:
        CLAUDE_MODE: mock
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(cargo tarpaulin --print-summary | grep "Coverage" | grep -oE '[0-9]+\.[0-9]+%' | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "::warning::Coverage is below 80% threshold"
          # Don't fail the build yet, just warn
        fi
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          coverage/
          **/*.log

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run benchmarks
      run: cargo bench --workspace
    
    - name: Archive benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      uses: actions-rust-lang/audit@v1
      with:
        ignore: RUSTSEC-2020-0071  # Example of ignoring a specific advisory