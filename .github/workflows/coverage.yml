name: Test Coverage

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Generate test coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Generate code coverage
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
        fail_ci_if_error: true
        verbose: true
    
    - name: Generate coverage report
      run: |
        cargo llvm-cov report --workspace
        
    - name: Check coverage threshold
      run: |
        # Extract coverage percentage
        COVERAGE=$(cargo llvm-cov report --workspace | grep TOTAL | awk '{print $10}' | sed 's/%//')
        echo "Coverage: ${COVERAGE}%"
        
        # Check if we meet 80% threshold
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below 80% threshold"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets 80% threshold"
        fi
        
    - name: Archive coverage results
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          lcov.info
          target/llvm-cov/html/
        retention-days: 7
        
  test-summary:
    name: Test Summary Report
    runs-on: ubuntu-latest
    needs: coverage
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run tests with JSON output
      run: |
        cargo test --workspace --no-fail-fast -- --format json --report-time > test-results.json || true
        
    - name: Generate test report
      run: |
        echo "# Test Results Summary" > test-report.md
        echo "" >> test-report.md
        
        # Count test results
        PASSED=$(grep '"event":"test"' test-results.json | grep '"passed"' | wc -l || echo 0)
        FAILED=$(grep '"event":"test"' test-results.json | grep '"failed"' | wc -l || echo 0)
        IGNORED=$(grep '"event":"test"' test-results.json | grep '"ignored"' | wc -l || echo 0)
        
        TOTAL=$((PASSED + FAILED + IGNORED))
        
        echo "## Test Statistics" >> test-report.md
        echo "- Total Tests: $TOTAL" >> test-report.md
        echo "- ✅ Passed: $PASSED" >> test-report.md
        echo "- ❌ Failed: $FAILED" >> test-report.md
        echo "- ⏭️ Ignored: $IGNORED" >> test-report.md
        echo "" >> test-report.md
        
        if [ $FAILED -gt 0 ]; then
          echo "## Failed Tests" >> test-report.md
          grep '"event":"test"' test-results.json | grep '"failed"' | jq -r '.name' | while read test; do
            echo "- $test" >> test-report.md
          done
        fi
        
        cat test-report.md
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('test-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });