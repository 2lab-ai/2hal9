name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-release
        run: cargo install cargo-release
      
      - name: Install git-cliff
        run: cargo install git-cliff
      
      - name: Check if release needed
        id: check
        run: |
          # Check if there are any commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS_SINCE=$(git rev-list $LAST_TAG..HEAD --count)
          echo "commits_since=$COMMITS_SINCE" >> $GITHUB_OUTPUT
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        if: steps.check.outputs.commits_since > 0
        run: |
          git cliff --latest --strip header > CHANGELOG_LATEST.md
      
      - name: Determine version bump
        if: steps.check.outputs.commits_since > 0
        id: version
        run: |
          # Analyze commit messages to determine version bump
          COMMITS=$(git log ${{ steps.check.outputs.last_tag }}..HEAD --pretty=format:"%s")
          
          if echo "$COMMITS" | grep -qE "BREAKING CHANGE:|!:"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            BUMP="minor"
          else
            BUMP="patch"
          fi
          
          echo "bump=$BUMP" >> $GITHUB_OUTPUT
          
          # Calculate new version
          CURRENT_VERSION=$(echo ${{ steps.check.outputs.last_tag }} | sed 's/v//')
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          case $BUMP in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update Cargo.toml versions
        if: steps.check.outputs.commits_since > 0
        run: |
          # Update workspace version
          sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.new_version }}"/' Cargo.toml
          
          # Update all member crate versions
          find . -name Cargo.toml -not -path "./target/*" -exec \
            sed -i 's/version = "[^"]*"/version = "${{ steps.version.outputs.new_version }}"/' {} \;
          
          # Update lock file
          cargo update --workspace
      
      - name: Create Pull Request
        if: steps.check.outputs.commits_since > 0
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: release ${{ steps.version.outputs.new_version }}"
          title: "Release ${{ steps.version.outputs.new_version }}"
          body: |
            ## Release ${{ steps.version.outputs.new_version }}
            
            ### Changes since ${{ steps.check.outputs.last_tag }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ---
            
            This PR was automatically created by the release workflow.
          branch: release/${{ steps.version.outputs.new_version }}
          delete-branch: true
      
      - name: Create Release
        if: steps.check.outputs.commits_since > 0 && github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Release ${{ steps.version.outputs.new_version }}
          body_path: CHANGELOG_LATEST.md
          draft: false
          prerelease: false
          generate_release_notes: true

  build-binaries:
    name: Build Release Binaries
    needs: release
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: hal9-linux-amd64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: hal9-darwin-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: hal9-darwin-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: hal9-windows-amd64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Package
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.name }}.zip hal9-server.exe hal9-cli.exe
          else
            tar czf ../../../${{ matrix.name }}.tar.gz hal9-server hal9-cli
          fi
      
      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release.outputs.version }}
          files: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip